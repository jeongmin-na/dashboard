# Samsung AI Experience Group Dashboard - Cursor Development Rules

## üìã Project Overview
- **Project Name**: Samsung AI Experience Group Dashboard
- **Tech Stack**: HTML5, CSS3, JavaScript (ES6+), Canvas API
- **Architecture**: Single Page Application (SPA) with Proxy Server
- **API Communication**: Cursor Admin API via Local Proxy Server (Port 8001)

## üé® Design System

### Color Palette
```css
/* Dark Theme Colors */
--primary-bg: #1a1a1a;          /* Main background */
--secondary-bg: #2a2a2a;         /* Card/section background */
--border-color: #3a3a3a;         /* Border */
--hover-bg: #3a3a3a;             /* Hover state */
--text-primary: #e1e1e1;         /* Primary text */
--text-secondary: #b1b1b1;       /* Secondary text */
--text-muted: #7a7a7a;           /* Muted text */
--accent-blue: #4a9eff;          /* Accent color (buttons, links) */
--success-green: #4caf50;        /* Success state */
--warning-orange: #ff9800;       /* Warning state */
--error-red: #f44336;            /* Error state */
```

### Typography
```css
/* Font Stack */
font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;

/* Heading Sizes */
--h1-size: 24px;    /* Page title */
--h2-size: 18px;    /* Section title */
--h3-size: 16px;    /* Card title */

/* Body Sizes */
--body-size: 14px;  /* Default text */
--small-size: 12px; /* Secondary text */
--large-size: 16px; /* Emphasized text */
```

### Layout Rules
```css
/* Grid System */
--grid-gap: 20px;           /* Default spacing */
--border-radius: 8px;       /* Card corners */
--border-radius-small: 4px; /* Small element corners */
--padding-standard: 20px;   /* Standard padding */
--padding-large: 30px;      /* Large padding */
```

## üèóÔ∏è Component Structure

### 1. Sidebar
```html
<!-- Sidebar Structure -->
<nav class="sidebar">
    <div class="logo">
        <div class="logo-name">Username</div>
        <div class="logo-business">Business ‚Ä¢ Email</div>
        <div class="logo-group">Group Name</div>
    </div>
    <a href="javascript:void(0)" class="menu-item" data-section="section-name">
        <span class="menu-icon">Emoji</span>
        <span class="menu-text">Menu Name</span>
    </a>
</nav>
```

### 2. Statistics Cards
```html
<!-- Statistics Card Structure -->
<div class="overview-stat-box clickable" data-type="type-name" onclick="handlerFunction()">
    <div class="stat-number">Number</div>
    <div class="stat-label">
        <span class="role-badge" style="background-color: #color; color: white;">Label</span>
    </div>
    <div class="stat-description">Description</div>
</div>
```

### 3. Data Tables
```html
<!-- Table Structure -->
<div class="data-table">
    <div class="table-header">
        <div onclick="sortFunction('field')">Column Name ‚Üï</div>
    </div>
    <div class="table-row">
        <div>Data</div>
    </div>
</div>
```

### 4. Filter Controls
```html
<!-- Filter Structure -->
<div class="filter-controls">
    <div class="chart-controls">
        <button class="chart-btn" data-days="7">7d</button>
        <div class="date-picker">
            <input type="date" id="start-date" />
            <span>~</span>
            <input type="date" id="end-date" />
            <button class="analytics-btn" onclick="applyFilter()">Apply</button>
        </div>
    </div>
    <div>
        <input type="text" class="search-box" placeholder="Search..." onkeyup="searchFunction(this.value)">
    </div>
</div>
```

## üîß JavaScript Coding Rules

### 1. Function Naming Rules
```javascript
// Verb + Noun format
function updateStatsCards() { }
function renderMemberList() { }
function filterActivitiesByType() { }
function applyDateFilter() { }

// Event handlers use 'handle' prefix
function handleMenuClick() { }
function handleFilterChange() { }

// Async functions use 'async' keyword
async function fetchTeamMembers() { }
async function updateWithRealData() { }
```

### 2. Variable Naming Rules
```javascript
// Global variables use camelCase
let currentFilterType = 'total';
let currentActivities = [];
let currentDateRange = null;

// Constants use UPPER_SNAKE_CASE
const API_CONFIG = {
    baseUrl: 'http://localhost:8001',
    apiKey: 'key_...',
    headers: { 'Content-Type': 'application/json' }
};

// API response data uses clear names
const membersData = await getTeamMembers();
const spendingData = await getTeamSpendingData();
const eventsData = await getFilteredEvents();
```

### 3. Error Handling Pattern
```javascript
// Use try-catch blocks
async function updateWithRealData() {
    try {
        console.log('=== Data update started ===');
        const data = await fetchData();
        updateUI(data);
        console.log('=== Data update completed ===');
    } catch (error) {
        console.error('‚ùå Data update failed:', error);
        showErrorMessage(error.message);
    }
}
```

### 4. Logging Rules
```javascript
// Start/end logs
console.log('=== Function name started ===');
console.log('=== Function name completed ===');

// Progress logs
console.log(`‚úÖ ${count} items processed`);
console.log(`üìä Stats: total ${total}, active ${active}`);

// Error logs
console.error('‚ùå Error occurred:', error);
```

## üìä API Communication Rules

### 1. API Configuration
```javascript
const API_CONFIG = {
    baseUrl: 'http://localhost:8001',
    apiKey: 'key_...',
    headers: {
        'Content-Type': 'application/json'
    }
};
```

### 2. API Call Functions
```javascript
async function callAPI(endpoint, method = 'GET', data = null) {
    try {
        const credentials = `${API_CONFIG.apiKey}:`;
        const encodedCredentials = btoa(credentials);
        
        const options = {
            method: method,
            headers: {
                ...API_CONFIG.headers,
                'Authorization': `Basic ${encodedCredentials}`
            }
        };

        if (data && method === 'POST') {
            options.body = JSON.stringify(data);
        }

        console.log(`API call: ${method} ${API_CONFIG.baseUrl}${endpoint}`);
        
        const response = await fetch(API_CONFIG.baseUrl + endpoint, options);
        
        if (!response.ok) {
            throw new Error(`API call failed: ${response.status}`);
        }

        return await response.json();
    } catch (error) {
        console.error('API call error:', error);
        throw error;
    }
}
```

### 3. Data Fetching Functions
```javascript
// Team members
async function getTeamMembers() {
    return await callAPI('/teams/members');
}

// Usage data
async function getUsageData(startDate, endDate) {
    return await callAPI('/teams/daily-usage-data', 'POST', {
        startDate: startDate,
        endDate: endDate
    });
}

// Spending data
async function getTeamSpendingData() {
    return await callAPI('/teams/spend', 'POST', {
        page: 1,
        pageSize: 1000
    });
}
```

## üéØ UI/UX Rules

### 1. Loading State Display
```javascript
// Show loading state
function showLoadingState(isLoading) {
    const elements = document.querySelectorAll('.loading-target');
    elements.forEach(el => {
        el.style.opacity = isLoading ? '0.5' : '1';
    });
}
```

### 2. Error Message Display
```javascript
// Show error message
function showErrorMessage(message) {
    const errorDiv = document.createElement('div');
    errorDiv.className = 'error-message';
    errorDiv.innerHTML = `
        <div style="text-align: center; padding: 20px; color: #ff6b6b;">
            <h3>‚ö†Ô∏è Error Occurred</h3>
            <p>${message}</p>
        </div>
    `;
    // Add to DOM
}
```

### 3. Empty State Display
```javascript
// Show empty state
function showEmptyState(container, message) {
    container.innerHTML = `
        <div style="padding: 20px; text-align: center; color: #7a7a7a; background-color: #1a1a1a;">
            ${message}
        </div>
    `;
}
```

## üîÑ State Management Rules

### 1. Global State Variables
```javascript
// Current filter state
let currentFilterType = 'total';
let currentDateRange = null;
let currentUsageDateRange = null;

// Current data state
let currentActivities = [];
let currentMembers = [];
let currentRawEventsData = [];

// Pagination state
let currentRawEventsPage = 1;
let currentRawEventsPageSize = 10;
```

### 2. State Update Functions
```javascript
// Update filter state
function updateFilterState(type, dateRange) {
    currentFilterType = type;
    currentDateRange = dateRange;
    updateUIWithCurrentState();
}

// Update data state
function updateDataState(newData) {
    currentActivities = newData;
    renderActivityList(currentActivities);
}
```

## üì± Responsive Design Rules

### 1. Media Queries
```css
/* Mobile responsive */
@media (max-width: 768px) {
    .sidebar {
        width: 70px;
    }
    
    .menu-text {
        display: none;
    }
    
    .overview-stats {
        grid-template-columns: 1fr;
    }
    
    .table-row {
        grid-template-columns: 1fr;
        gap: 8px;
    }
}
```

### 2. Grid System
```css
/* Basic grid */
.overview-stats {
    display: grid;
    grid-template-columns: repeat(3, 1fr);
    gap: 20px;
}

/* Table grid */
.table-row {
    display: grid;
    grid-template-columns: 2fr 2fr 1fr 1fr 1fr 0.5fr;
    gap: 20px;
}
```

## üöÄ Performance Optimization Rules

### 1. Debouncing
```javascript
// Search debouncing
function debounce(func, wait) {
    let timeout;
    return function executedFunction(...args) {
        const later = () => {
            clearTimeout(timeout);
            func(...args);
        };
        clearTimeout(timeout);
        timeout = setTimeout(later, wait);
    };
}

const debouncedSearch = debounce(filterMembers, 300);
```

### 2. Caching
```javascript
// Data caching
const DataCache = {
    members: null,
    spending: null,
    events: null,
    
    set(key, data) {
        this[key] = {
            data: data,
            timestamp: Date.now()
        };
    },
    
    get(key) {
        const cached = this[key];
        if (cached && Date.now() - cached.timestamp < 5 * 60 * 1000) {
            return cached.data;
        }
        return null;
    }
};
```

### 3. Progressive Loading
```javascript
// Progressive loading
async function progressiveLoad() {
    // Step 1: Show basic UI
    showSkeletonUI();
    
    // Step 2: Show cached data
    const cachedData = DataCache.get('members');
    if (cachedData) {
        updateUIWithData(cachedData);
    }
    
    // Step 3: Load latest data
    const freshData = await fetchLatestData();
    updateUIWithData(freshData);
    DataCache.set('members', freshData);
}
```

## üß™ Testing and Debugging Rules

### 1. Console Logging
```javascript
// Function start/end logging
console.log('=== Function name started ===');
console.log('=== Function name completed ===');

// Data logging
console.log('üìä Data:', data);
console.log(`‚úÖ ${count} processed`);

// Error logging
console.error('‚ùå Error:', error);
```

### 2. Performance Monitoring
```javascript
// Performance measurement
const PerformanceMonitor = {
    timers: {},
    
    start(label) {
        this.timers[label] = Date.now();
        console.log(`‚è±Ô∏è ${label} started`);
    },
    
    end(label) {
        const duration = Date.now() - this.timers[label];
        console.log(`‚è±Ô∏è ${label} completed: ${duration}ms`);
        return duration;
    }
};
```

## üìù Code Comment Rules

### 1. Function Comments
```javascript
/**
 * Update team member list with real API data
 * @returns {Promise<void>}
 */
async function updateMembersWithRealData() {
    // Implementation...
}
```

### 2. Section Comments
```javascript
// ============================================================================
// API Communication Functions
// ============================================================================

// ============================================================================
// UI Update Functions
// ============================================================================
```

### 3. Inline Comments
```javascript
// Determine current filter period
let dateRange;
if (currentDateRange) {
    dateRange = currentDateRange;
} else {
    const filterDays = getCurrentFilterDays();
    dateRange = getDateRange(filterDays);
}
```

## üîí Security Rules

### 1. API Key Management
```javascript
// Manage API keys in environment variables or separate config files
const API_CONFIG = {
    baseUrl: 'http://localhost:8001',
    apiKey: process.env.CURSOR_API_KEY || 'key_...',
    headers: {
        'Content-Type': 'application/json'
    }
};
```

### 2. Input Validation
```javascript
// User input validation
function validateDateRange(startDate, endDate) {
    if (!startDate || !endDate) {
        throw new Error('Please select both start and end dates.');
    }
    
    if (startDate > endDate) {
        throw new Error('Start date cannot be later than end date.');
    }
}
```

## üìö File Structure Rules

### 1. HTML Structure
```html
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Page Title</title>
    <style>
        /* CSS styles */
    </style>
</head>
<body>
    <div class="dashboard-container">
        <!-- Sidebar -->
        <nav class="sidebar">
            <!-- Sidebar content -->
        </nav>
        
        <!-- Main content -->
        <main class="main-content">
            <!-- Header -->
            <header class="header">
                <!-- Header content -->
            </header>
            
            <!-- Content area -->
            <div class="content-area">
                <!-- Sections -->
            </div>
        </main>
    </div>
    
    <script>
        // JavaScript code
    </script>
</body>
</html>
```

### 2. CSS Structure
```css
/* Basic reset */
* { margin: 0; padding: 0; box-sizing: border-box; }

/* Layout */
.dashboard-container { /* Main container */ }
.sidebar { /* Sidebar */ }
.main-content { /* Main content */ }

/* Components */
.overview-stats { /* Statistics cards */ }
.data-table { /* Data table */ }
.filter-controls { /* Filter controls */ }

/* Utilities */
.clickable-email { /* Clickable email */ }
.role-badge { /* Role badge */ }

/* Responsive */
@media (max-width: 768px) { /* Mobile responsive */ }
```

Following these rules will help create consistent and maintainable code.

## üåê Language and Communication Rules

### 1. Korean Response Rules
```
All user communication must be conducted in Korean.
- Code comments should be written in Korean
- Error messages should be displayed in Korean
- User guidance messages should be provided in Korean
- Technical terms can be written in English as needed
```

### 2. Port Consistency Rules
```
When running dash.html, proxy server and dashboard ports must always match.

Default settings:
- Proxy server port: 8001
- Dashboard access URL: http://localhost:8001/dash.html

When changing ports:
1. Check proxy_server.py port settings
2. Check dash.html API_CONFIG.baseUrl port
3. Check browser access URL port
4. All ports must be set to the same value

Execution order:
1. python proxy_server.py (run on port 8001)
2. Access http://localhost:8001/dash.html in browser
3. API calls may fail if ports don't match
```

### 3. Development Environment Rules
```
Always set up the development environment in the following order:

1. Start proxy server
   python proxy_server.py

2. Access dashboard in browser
   http://localhost:8001/dash.html

3. Verify ports
   - Proxy server: 8001
   - Dashboard URL: 8001
   - API calls: 8001

4. Check port consistency if issues occur
```

### 4. UI/UX Change Restriction Rules
```
Do not arbitrarily change UI/UX until explicitly requested by the user.

Allowed changes:
- Bug fixes (when functionality is broken)
- Security vulnerability fixes
- Performance optimization (not affecting user experience)
- Code refactoring (no visual changes)

Prohibited changes:
- Color, font, layout changes
- Adding new UI components
- Modifying existing component styles
- Changing user interface structure
- Adding/modifying animations or transitions

Pre-change checklist:
1. Confirm user explicitly requested the change
2. Verify changes align with existing design system
3. Consider impact on overall user experience
4. Explain changes to user before applying

Exception cases:
- Critical security issue fixes
- Accessibility improvements (can be applied without user request)
- Browser compatibility issue fixes
```

### 5. Documentation Synchronization Rules
```
Always update related documentation when code changes are made.

Automatic documentation update targets:
- technical_documentation.md: Reflect technical changes
- user_manual_doc.md: Reflect user experience changes
- README.md: Update when major features are added/changed

Update timing:
1. Immediately after code changes are accepted
2. When new features are added
3. When existing feature behavior changes
4. When user interface is modified
5. When API endpoints or data structures change

Documentation update content:
- Detailed description of changes
- New usage instructions
- Updated code examples
- Screenshots or diagram updates (if needed)
- Version history additions

Update procedure:
1. Identify related documents immediately after code changes
2. Write clear descriptions of changes
3. Write documentation from user perspective
4. Update both technical and user documentation
5. Include date and version information

Documentation writing principles:
- Clear and specific descriptions
- Provide step-by-step guides
- Include code examples and real use cases
- Write in Korean with English technical terms as needed
- Maintain consistent format and style
```